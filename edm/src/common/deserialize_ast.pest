// Deserialization Logic for EdgeQL AST parser
// via Pest Grammar

atomic_node = ${
      bin_op
    | create_alias
    | create_concrete_link
    | create_concrete_property
    | create_function
    | create_index
    | create_link
    | create_object_type
    | delete_query
    | for_query
    | func_param
    | function_call
    | function_code
    | insert_query
    | integer_constant
    | module_alias_declaration
    | module_declaration
    | object_ref
    | path
    | ptr
    | schema
    | select_query
    | set
    | set_field
    | shape_element
    | shape_operation
    | string_constant
    | type_cast
    | type_name
    | update_query    
}

bin_op = { " ⛁ " }


create_alias = { " ⛁ " }


create_concrete_link = { " ⛁ " }


create_concrete_property = { " ⛁ " }


create_function = { " ⛁ " }


create_index = { " ⛁ " }


create_link = { " ⛁ " }


create_object_type = { " ⛁ " }


delete_query = { " ⛁ " }


for_query = { " ⛁ " }


func_param = { " ⛁ " }


function_call = { " ⛁ " }


function_code = { " ⛁ " }


insert_query = { " ⛁ " }


integer_constant = { " ⛁ " }


module_alias_declaration = { " ⛁ " }


module_declaration = {
    "<" ~ __ ~  "TreeNode" ~ __
    ~ "id" ~ __ ~ "=" ~ id ~ __
    ~ "name" ~ __ ~ "=" ~ __ ~ "'ModuleDeclaration'" ~ __  // A better approach likely
    ~ "children" ~ __ ~ "=" ~ __ ~ "CheckedList" ~ __     // exists to statically
    ~ "[" ~ __ ~ "TreeNodeChild" ~ __ ~ "]" ~ __         // check for the `ModuleDeclaration`
    ~ "<" ~ __ ~ "label" ~ __ ~ "=" ~ "'name'" ~ __     // name via `PEEK` or `PUSH/POP`
    ~ "node" ~ __ ~ "=" ~ __ ~ tree_node ~ __
}

object_ref = { " ⛁ " }


path = { " ⛁ " }


ptr = { " ⛁ " }

// By default, the ql_parser adds the `schema default { ... }`
// wrapper around a single-module SDL block, so this will
// still likely be used.
schema = ${ SOI ~
    "<" ~ __ ~ "TreeNode" ~ __
    ~ "id" ~ "=" ~ id ~ __
    ~ "name" ~ "=" ~ __ ~ "Schema" ~ __
    ~ "children" ~ __ ~ "=" ~ __ ~"[" ~ __ ~ module ~ __ ~ "]" ~ __ ~ ">" ~ EOI
}

select_query = { " ⛁ " }


set = { " ⛁ " }


set_field = { " ⛁ " }


shape_element = { " ⛁ " }


shape_operation = { " ⛁ " }


string_constant = { " ⛁ " }


type_cast = { " ⛁ " }


type_name = { " ⛁ " }


update_query = { " ⛁ " }


brackets = { "'[]'" | "'()'" | "'{}'" }

checked_list = ${
    __ ~ "CheckedList" ~ "[" ~ ( __ ~ "TreeNodeChild" | __ ~ "Markup" ) ~ __ ~ "]"
    ~ "(" ~ __ ~ "[" ~ (( __ ~ tree_node_child | __ ~ tree_node ) ~ _)+ ~ "]" ~ __ ~ ")"
}

id = { "None" | ('0'..'9'){15} }

// `list_kind` seems to be a subset of `checked_list` 
// -- supporting only "Markup" elements
list_kind = {
    "<" 
    ~ "List"
    ~ "id" ~ "=" ~ id
    ~ "items" ~ "=" ~ checked_list
    ~ ">"
}

// `module` is a special case of the the `tree_node_child`
module = { 
     "[" ~ "<" 
     ~ "TreeNodeChild"
     ~ "id" ~ "=" ~ id
     ~ "label" ~ "=" ~ "'declarations'" 
     ~ "node" ~ "=" ~ module_node 
     ~ ">" ~ "]"
}

// `module_node_list` seems to be a 
// special case of `checked_list`
module_node = {
    "<" ~ "List" ~ " " 
    ~ "id" ~ "=" ~ id ~ __
    ~ "items" ~ "=" ~ __ ~ "CheckedList"
    ~ "[" ~ __ ~ "Markup" ~ __ ~ "]"
    ~ "(" ~ __ ~ "[" ~ __ ~ module_declaration ~ __ ~ "]" ~ __ ~ ")" ~ __
}

string_kind_cardinality = ${ 
    "<" ~ "String" ~ " " ~ "str" ~ __
    ~ "=" ~ "<Schema" 
          ~ ( 
                cardinality_one | 
                cardinality_many |
                cardinality_at_most_one |
                cardinality_at_least_one |
                cardinality_unknown
          ) ~ __
    ~ ">"   
}

// Cardinality Atoms
cardinality_one          = { "Cardinality.One: 'One'" }
cardinality_many         = { "Cardinality.Many: 'Many'" }
cardinality_at_most_one  = { "Cardinality.AtMostOne: 'AtMostOne'" }
cardinality_at_least_one = { "Cardinality.AtLeastOne: 'AtLeastOne'" }
cardinality_unknown      = { "Cardinality.Unknown: 'Unknown'" }

string_kind_raw_literal = { "<" ~ "String" ~ "str" ~ "=" ~ str_value ~ ">" }

root = ${ SOI ~ ( schema | module ) ~ EOI }

string_kind = ${
      string_kind_cardinality
    | string_kind_raw_literal
}

str_value = { !(__forbidden_char)+  }

// `str_value` should hit a single-quote
name = { str_value }

tree_node = ${
    "<" ~ __ ~ "TreeNode" ~ __
    ~ "id" ~ __ ~ "=" ~ __ ~ id ~ __
    ~ "name" ~ __ ~ "=" ~ __ ~ name ~ __
    ~ "children" ~ __ ~ "=" ~ __ ~ checked_list ~ __
    ~ ( "brackets" ~ "=" ~ brackets ~ __ )? ~ __
    ~ ">"
}

label = { str_value }
// label = @{ "'" ~ " "* ~ str_value ~ " "* ~ "'" }

tree_node_child = ${
    "<" ~ "TreeNodeChild" ~ __
    ~ "id" ~ "=" ~ id ~ __
    ~ "label" ~ "=" ~ label ~ __
    ~ "node"  ~ "=" ~ rhs ~ ">"
}

rhs = ${
      list_kind 
    | string_kind 
    | atomic_node
    | true_constant_type_kind
}

true_constant_type_kind = @{ "<TrueConstantType>" }

// These are characters which cannot used used in
// raw-literal strings that resemble words. No math 
// operators, no brackets, etc. 
__forbidden_char = ${
    " " | "," | "`" | "~" | "!" | "@" | "."
    | "#" | "$" | "%" | "^" | "&" | "*" | "-"
    | "+" | "=" | "\\" | "|" | ":" | ";" | "?" | "/"
    | "(" | ")" | "[" | "]" | "<" | ">" | "{" | "}"
    | "\"" | "'"
}
    
__ignore = _{
      " " 
    | "," 
    | NEWLINE
    | "trimmed=False"
    | ("at 0x" ~ ASCII_ALPHANUMERIC{12})
    | ("edb." ~ ( ASCII_ALPHA_LOWER* ~ "." )+ )
}

__ = _{ __ignore* } // The potential kinds of erroneous syntax is
                  // not feasible to recreate with the EdgeDB QL Parser
