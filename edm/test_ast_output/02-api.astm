Schema <0x7f7ab80c2820> (
    declarations = [
        ModuleDeclaration <0x7f7ab80c2610> (
            name         = ObjectRef<0x7f7ab809ccd0>(name='api'),
            declarations = [
                CreateObjectType <0x7f7ab903fee0> (
                    name     = ObjectRef<0x7f7ab3fd4160>(name='Session'),
                    commands = [
                        CreateConcreteLink <0x7f7ab3f98cd0> (
                            is_required = True,
                            target      = TypeName <0x7f7ab18ec550> (
                                maintype = ObjectRef<0x7f7ab3f98f10>(name='User')
                            ),
                            cardinality = <SchemaCardinality.One: 'One'>,
                            name        = ObjectRef<0x7f7ab3faa250>(name='user')
                        ),
                        CreateConcreteProperty <0x7f7ab3f98fa0> (
                            is_required = True,
                            target      = TypeName <0x7f7ab18ece80> (
                                maintype = ObjectRef <0x7f7ab3faa280> (
                                    name   = 'duration',
                                    module = 'std'
                                )
                            ),
                            cardinality = <SchemaCardinality.One: 'One'>,
                            name        = ObjectRef<0x7f7ab18ec7c0>(name='allottedDuration'),
                            commands    = [
                                SetField <0x7f7ab18ec970> (
                                    name  = 'default',
                                    value = SelectQuery <0x7f7ab903f190> (
                                        aliases = [
                                            ModuleAliasDecl<0x7f7ab903f250>(module='api')
                                        ],
                                        result  = TypeCast <0x7f7ab903f880> (
                                            expr = StringConstant <0x7f7ab903fac0> (
                                                value = '24 hours'
                                            ),
                                            type = TypeName <0x7f7ab903f7c0> (
                                                maintype = ObjectRef <0x7f7ab903f520> (
                                                    name = 'duration'
                                                )
                                            )
                                        ),
                                        orderby = []
                                    )
                                )
                            ]
                        ),
                        CreateConcreteProperty <0x7f7ab18ec490> (
                            is_required = True,
                            target      = TypeName <0x7f7ab903fe20> (
                                maintype = ObjectRef <0x7f7ab3f98df0> (
                                    name   = 'datetime',
                                    module = 'std'
                                )
                            ),
                            cardinality = <SchemaCardinality.One: 'One'>,
                            name        = ObjectRef<0x7f7ab18ecf10>(name='createdAt'),
                            commands    = [
                                SetField <0x7f7ab903f3d0> (
                                    name  = 'default',
                                    value = SelectQuery <0x7f7ab3e795e0> (
                                        aliases = [
                                            ModuleAliasDecl<0x7f7ab3e79160>(module='api')
                                        ],
                                        result  = FunctionCall <0x7f7ab3e797f0> (
                                            func = 'datetime_current'
                                        ),
                                        orderby = []
                                    )
                                )
                            ]
                        ),
                        CreateConcreteProperty <0x7f7ab3faa130> (
                            is_required = True,
                            target      = TypeName <0x7f7ab903ff10> (
                                maintype = ObjectRef<0x7f7ab18ecc70>(name='str', module='std')
                            ),
                            cardinality = <SchemaCardinality.One: 'One'>,
                            name        = ObjectRef<0x7f7ab903f610>(name='sessionID')
                        ),
                        CreateConcreteProperty <0x7f7ab18ec670> (
                            target      = TypeName <0x7f7ab3e79b50> (
                                maintype = ObjectRef<0x7f7ab903feb0>(name='str', module='std')
                            ),
                            cardinality = <SchemaCardinality.One: 'One'>,
                            name        = ObjectRef<0x7f7ab3e795b0>(name='token')
                        )
                    ]
                ),
                CreateFunction <0x7f7ab18c4430> (
                    returning         = TypeName <0x7f7ab3e79ca0> (
                        maintype = ObjectRef<0x7f7ab3e79bb0>(name='Session')
                    ),
                    code              = FunctionCode <0x7f7ab18c40a0> (
                        language  = <Language.EdgeQL: 'EDGEQL'>,
                        from_expr = False
                    ),
                    nativecode        = DeleteQuery <0x7f7ab18c4490> (
                        aliases = [ModuleAliasDecl<0x7f7ab18c4250>(module='api')],
                        subject = IfElse <0x7f7ab3e21d00> (
                            condition = BinOp <0x7f7ab18cd0a0> (
                                left  = BinOp <0x7f7ab3e21610> (
                                    left  = TypeCast <0x7f7ab18c4f40> (
                                        expr = Path <0x7f7ab18c4f70> (
                                            steps = [
                                                ObjectRef<0x7f7ab18c4fa0>(name='Session'),
                                                Ptr <0x7f7ab18c4ee0> (
                                                    ptr       = ObjectRef <0x7f7ab18cd250> (
                                                        name = 'createdAt'
                                                    ),
                                                    direction = <PointerDirection.Outbound: '>'>
                                                )
                                            ]
                                        ),
                                        type = TypeName <0x7f7ab18c4c10> (
                                            maintype = ObjectRef <0x7f7ab18c4970> (
                                                name = 'datetime'
                                            )
                                        )
                                    ),
                                    op    = '+',
                                    right = TypeCast <0x7f7ab3e218e0> (
                                        expr = Path <0x7f7ab3e21b20> (
                                            steps = [
                                                ObjectRef<0x7f7ab3e21b50>(name='Session'),
                                                Ptr <0x7f7ab3e21bb0> (
                                                    ptr       = ObjectRef <0x7f7ab3e21d60> (
                                                        name = 'allottedDuration'
                                                    ),
                                                    direction = <PointerDirection.Outbound: '>'>
                                                )
                                            ]
                                        ),
                                        type = TypeName <0x7f7ab3e21760> (
                                            maintype = ObjectRef <0x7f7ab18c4940> (
                                                name = 'duration'
                                            )
                                        )
                                    )
                                ),
                                op    = '<=',
                                right = FunctionCall<0x7f7ab3e2c340>(func='datetime_current')
                            ),
                            if_expr   = Path <0x7f7ab18c4640> (
                                steps = [ObjectRef<0x7f7ab18c46a0>(name='Session')]
                            ),
                            else_expr = TypeCast <0x7f7ab3e2c5e0> (
                                expr = Set<0x7f7ab3e2c7f0>(),
                                type = TypeName <0x7f7ab3e2c0d0> (
                                    maintype = ObjectRef<0x7f7ab18c4a30>(name='Session')
                                )
                            )
                        ),
                        orderby = []
                    ),
                    returning_typemod = <TypeModifier.SetOfType: 'SetOfType'>,
                    name              = ObjectRef<0x7f7ab3faa070>(name='clear_expired')
                ),
                CreateFunction <0x7f7ab1e20cd0> (
                    returning         = TypeName <0x7f7ab3e79f40> (
                        maintype = ObjectRef<0x7f7ab3e799d0>(name='Session')
                    ),
                    code              = FunctionCode <0x7f7ab1e20700> (
                        language  = <Language.EdgeQL: 'EDGEQL'>,
                        from_expr = False
                    ),
                    nativecode        = ForQuery <0x7f7ab1e0d730> (
                        iterator       = Set <0x7f7ab1e0d520> (
                            elements = [
                                FunctionCall <0x7f7ab1e0d8e0> (
                                    func = 'validate_credentials',
                                    args = [
                                        Path <0x7f7ab1e0da90> (
                                            steps = [ObjectRef<0x7f7ab1e0dac0>(name='EMAIL')]
                                        ),
                                        Path <0x7f7ab1e0deb0> (
                                            steps = [ObjectRef<0x7f7ab1e0dee0>(name='PASS')]
                                        )
                                    ]
                                )
                            ]
                        ),
                        iterator_alias = 'USER',
                        aliases        = [ModuleAliasDecl<0x7f7ab3e2cfa0>(module='api')],
                        result         = InsertQuery <0x7f7ab1e0daf0> (
                            subject = Path <0x7f7ab1e0d7c0> (
                                steps = [ObjectRef<0x7f7ab1e0ddc0>(name='Session')]
                            ),
                            shape   = [
                                ShapeElement <0x7f7ab809c520> (
                                    expr      = Path <0x7f7ab809c220> (
                                        steps = [
                                            Ptr <0x7f7ab1e0df40> (
                                                ptr       = ObjectRef<0x7f7ab809c2b0>(name='token'),
                                                direction = <PointerDirection.Outbound: '>'>
                                            )
                                        ]
                                    ),
                                    compexpr  = TypeCast <0x7f7ab809cc40> (
                                        expr = SelectQuery <0x7f7ab1e20190> (
                                            result  = FunctionCall <0x7f7ab1e20430> (
                                                func = 'random_big_str_id'
                                            ),
                                            orderby = []
                                        ),
                                        type = TypeName <0x7f7ab809cb80> (
                                            maintype = ObjectRef<0x7f7ab809c880>(name='str')
                                        )
                                    ),
                                    operation = ShapeOperation <0x7f7ab809cd30> (
                                        op = <ShapeOp.ASSIGN: 'ASSIGN'>
                                    )
                                ),
                                ShapeElement <0x7f7ab1e20580> (
                                    expr      = Path <0x7f7ab1e200a0> (
                                        steps = [
                                            Ptr <0x7f7ab1e0d700> (
                                                ptr       = ObjectRef <0x7f7ab1e20250> (
                                                    name = 'sessionID'
                                                ),
                                                direction = <PointerDirection.Outbound: '>'>
                                            )
                                        ]
                                    ),
                                    compexpr  = TypeCast <0x7f7ab1e20c40> (
                                        expr = SelectQuery <0x7f7ab1e24190> (
                                            result  = FunctionCall <0x7f7ab1e24430> (
                                                func = 'random_big_str_id'
                                            ),
                                            orderby = []
                                        ),
                                        type = TypeName <0x7f7ab1e20b80> (
                                            maintype = ObjectRef<0x7f7ab1e20880>(name='str')
                                        )
                                    ),
                                    operation = ShapeOperation <0x7f7ab1e20d30> (
                                        op = <ShapeOp.ASSIGN: 'ASSIGN'>
                                    )
                                ),
                                ShapeElement <0x7f7ab1e240d0> (
                                    expr      = Path <0x7f7ab809c9a0> (
                                        steps = [
                                            Ptr <0x7f7ab809c820> (
                                                ptr       = ObjectRef<0x7f7ab1e206a0>(name='user'),
                                                direction = <PointerDirection.Outbound: '>'>
                                            )
                                        ]
                                    ),
                                    compexpr  = Path <0x7f7ab1e246d0> (
                                        steps = [ObjectRef<0x7f7ab1e24700>(name='USER')]
                                    ),
                                    operation = ShapeOperation <0x7f7ab1e24550> (
                                        op = <ShapeOp.ASSIGN: 'ASSIGN'>
                                    )
                                )
                            ]
                        )
                    ),
                    returning_typemod = <TypeModifier.SetOfType: 'SetOfType'>,
                    params            = [
                        FuncParam <0x7f7ab3e79c40> (
                            name = 'EMAIL',
                            type = TypeName <0x7f7ab3e79310> (
                                maintype = ObjectRef<0x7f7ab3e79e50>(name='str', module='std')
                            ),
                            kind = <ParameterKind.PositionalParam: 'PositionalParam'>
                        ),
                        FuncParam <0x7f7ab3e2c640> (
                            name = 'PASS',
                            type = TypeName <0x7f7ab3e2cd60> (
                                maintype = ObjectRef<0x7f7ab3e2cc70>(name='str', module='std')
                            ),
                            kind = <ParameterKind.PositionalParam: 'PositionalParam'>
                        )
                    ],
                    name              = ObjectRef<0x7f7ab80b7d00>(name='create_new_session')
                ),
                CreateFunction <0x7f7ab3e40b50> (
                    returning         = TypeName <0x7f7ab903ffd0> (
                        maintype = ObjectRef<0x7f7ab3e2cdf0>(name='User')
                    ),
                    code              = FunctionCode <0x7f7ab3e40640> (
                        language  = <Language.EdgeQL: 'EDGEQL'>,
                        from_expr = False
                    ),
                    nativecode        = SelectQuery <0x7f7ab3e40e50> (
                        aliases = [ModuleAliasDecl<0x7f7ab1e24ac0>(module='api')],
                        result  = SelectQuery <0x7f7ab3e40f10> (
                            result   = Path <0x7f7ab1e24eb0> (
                                steps = [ObjectRef<0x7f7ab1e24f10>(name='User')]
                            ),
                            implicit = True,
                            orderby  = [],
                            where    = BinOp <0x7f7ab3e40c40> (
                                left  = BinOp <0x7f7ab3e40910> (
                                    left  = Path <0x7f7ab1e24e80> (
                                        steps   = [
                                            Ptr <0x7f7ab3e400d0> (
                                                ptr       = ObjectRef<0x7f7ab3e403a0>(name='email'),
                                                direction = <PointerDirection.Outbound: '>'>
                                            )
                                        ],
                                        partial = True
                                    ),
                                    op    = '=',
                                    right = Path <0x7f7ab3e408b0> (
                                        steps = [ObjectRef<0x7f7ab3e408e0>(name='EMAIL')]
                                    )
                                ),
                                op    = 'AND',
                                right = BinOp <0x7f7ab1e24d00> (
                                    left  = Path <0x7f7ab3e40be0> (
                                        steps   = [
                                            Ptr <0x7f7ab3e40bb0> (
                                                ptr       = ObjectRef<0x7f7ab3e40c10>(name='password'),
                                                direction = <PointerDirection.Outbound: '>'>
                                            )
                                        ],
                                        partial = True
                                    ),
                                    op    = '=',
                                    right = Path <0x7f7ab3e53160> (
                                        steps = [ObjectRef<0x7f7ab3e53190>(name='PASS')]
                                    )
                                )
                            )
                        ),
                        limit   = IntegerConstant<0x7f7ab3e40a90>(value='1')
                    ),
                    returning_typemod = <TypeModifier.SetOfType: 'SetOfType'>,
                    params            = [
                        FuncParam <0x7f7ab1e0d100> (
                            name = 'EMAIL',
                            type = TypeName <0x7f7ab3e2cbb0> (
                                maintype = ObjectRef<0x7f7ab3e2ceb0>(name='str', module='std')
                            ),
                            kind = <ParameterKind.PositionalParam: 'PositionalParam'>
                        ),
                        FuncParam <0x7f7ab1e248e0> (
                            name = 'PASS',
                            type = TypeName <0x7f7ab1e0d3d0> (
                                maintype = ObjectRef<0x7f7ab809ca00>(name='str', module='std')
                            ),
                            kind = <ParameterKind.PositionalParam: 'PositionalParam'>
                        )
                    ],
                    name              = ObjectRef<0x7f7ab3e21670>(name='validate_credentials')
                )
            ]
        )
    ]
)
